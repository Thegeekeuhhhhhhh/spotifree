name: Build and Test Spotifree

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

jobs:
  test-backend:
    name: Test Python Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run backend tests
      run: |
        cd backend
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./backend/coverage.xml

  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Lint (if configured)
      working-directory: ./frontend
      run: npm run lint --if-present
    
    - name: Run tests (if configured)
      working-directory: ./frontend
      run: npm test --if-present -- --coverage --watchAll=false
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  build:
    name: Build Desktop App - ${{ matrix.os }}
    needs: [test-backend, test-frontend]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: spotifree-linux.tar.gz
          - os: windows-latest
            platform: windows
            artifact_name: spotifree-windows.zip
          - os: macos-latest
            platform: macos
            artifact_name: spotifree-macos.tar.gz
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Copy frontend build to backend
      shell: bash
      run: |
        mkdir -p backend/dist/frontend
        cp -r frontend/build/* backend/dist/frontend/
    
    - name: Build backend with PyInstaller (Windows)
      if: matrix.platform == 'windows'
      working-directory: ./backend
      run: |
        pyinstaller --name=spotifree --windowed --onefile --add-data "dist/frontend;frontend" app.py
    
    - name: Build backend with PyInstaller (Unix)
      if: matrix.platform != 'windows'
      working-directory: ./backend
      run: |
        pyinstaller --name=spotifree --windowed --onefile --add-data "dist/frontend:frontend" app.py
    
    - name: Package application (Linux)
      if: matrix.platform == 'linux'
      run: |
        mkdir -p release/spotifree
        cp backend/dist/spotifree release/spotifree/
        cp LICENSE release/spotifree/ || true
        cp README.md release/spotifree/ || true
        cd release
        tar -czvf spotifree-linux.tar.gz spotifree
    
    - name: Package application (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path release/spotifree
        Copy-Item backend/dist/spotifree.exe release/spotifree/
        Copy-Item LICENSE release/spotifree/ -ErrorAction SilentlyContinue
        Copy-Item README.md release/spotifree/ -ErrorAction SilentlyContinue
        Compress-Archive -Path release/spotifree -DestinationPath release/spotifree-windows.zip
    
    - name: Package application (macOS)
      if: matrix.platform == 'macos'
      run: |
        mkdir -p release/spotifree
        cp backend/dist/spotifree release/spotifree/
        cp LICENSE release/spotifree/ || true
        cp README.md release/spotifree/ || true
        cd release
        tar -czvf spotifree-macos.tar.gz spotifree
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: spotifree-${{ matrix.platform }}
        path: release/${{ matrix.artifact_name }}
        retention-days: 7

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          spotifree-linux/*.tar.gz
          spotifree-windows/*.zip
          spotifree-macos/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}